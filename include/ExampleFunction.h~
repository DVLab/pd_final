#include "ExampleFunction.h"
#include <math.h>
#include <iostream>
// minimize 3*x^2 + 2*x*y + 2*y^2 + 7

ExampleFunction::ExampleFunction(Placement &placement)
	:_placement(placement),_last(0),count(0)
{
}

void ExampleFunction::evaluateFG(const vector<double> &x, double &f, vector<double> &g)
{

    if(count == 50){
        f = _last;
        for(unsigned i = 0;i<2*_placement.numModules();++i)
            g[i] = 0;
    }
    else{
        f = 0;
        unsigned num = _placement.numModules();
        double r = 0.01*(_placement.boundryRight() - _placement.boundryLeft());

        for(unsigned i = 0;i<2*num;++i)
            g[i] = 0;


        for(unsigned i = 0 ; i<_placement.numNets();++i){
            double f_1=0.0,f_2=0.0,f_3=0.0,f_4=0.0;
            vector<unsigned> moduleID;
            Net& net = _placement.net(i);
            for(unsigned j = 0; j<net.numPins();++j){
                moduleID.push_back(net.pin(j).moduleId());
            }

            for(unsigned k = 0; k<moduleID.size();++k){
                if(_placement.module(moduleID[k]).isFixed()){
                    Module& module = _placement.module(moduleID[k]);
                    f_1 = f_1 + exp( (module.centerX()+net.pin(k).xOffset()) /r);
                    f_2 = f_2 + exp((-1*(module.centerX()+net.pin(k).xOffset()))/r);
                    f_3 = f_3 + exp((module.centerY()+net.pin(k).yOffset())/r);
                    f_4 = f_4 + exp((-1*(module.centerY()+net.pin(k).yOffset()))/r);
                }    
                else{
                    f_1 = f_1 + exp((x[moduleID[k]]+net.pin(k).xOffset())/r);
                    f_2 = f_2 + exp((-1*(x[moduleID[k]]+net.pin(k).xOffset()))/r);
                    f_3 = f_3 + exp((x[moduleID[k]+num]+net.pin(k).yOffset())/r);
                    f_4 = f_4 + exp((-1*(x[moduleID[k]+num])+net.pin(k).xOffset())/r);
                }

            }
            f = f + log(f_1) + log(f_2) + log(f_3) + log(f_4) ;

            for(unsigned k=0; k<moduleID.size();++k){
                if(_placement.module(moduleID[k]).isFixed()==false){
                    g[moduleID[k]]     += ( (exp((x[moduleID[k]]+net.pin(k).xOffset())/r))*(1/f_1) + (exp((-1*(x[moduleID[k]]+net.pin(k).xOffset()))/r)*(-1))*(1/f_2) ); 
                    g[moduleID[k]+num] += ( (exp((x[moduleID[k]+num]+net.pin(k).yOffset())/r))*(1/f_3) + (exp((-1*(x[moduleID[k]+num])+net.pin(k).xOffset())/r)*(-1))*(1/f_4) );
                }
            }

        }
        f = f * r;
        if(_last == f){
            count ++;
        }
        else
            _last = f;

    }
}

void ExampleFunction::evaluateF(const vector<double> &x, double &f)
{
    if(count == 50){
        f = _last;
    }
    else{
        f = 0;
        unsigned num = _placement.numModules();
        double r = 0.01*(_placement.boundryRight() - _placement.boundryLeft());

        for(unsigned i = 0 ; i<_placement.numNets();++i){
            double f_1=0.0,f_2=0.0,f_3=0.0,f_4=0.0;
            vector<unsigned> moduleID;
            Net& net = _placement.net(i);
            for(unsigned j = 0; j<net.numPins();++j){
                moduleID.push_back(net.pin(j).moduleId());
            }

            for(unsigned k = 0; k<moduleID.size();++k){
                if(_placement.module(moduleID[k]).isFixed()){
                    Module& module = _placement.module(moduleID[k]);
                    f_1 = f_1 + exp((module.centerX()+net.pin(k).xOffset()) /r);
                    f_2 = f_2 + exp((-1*(module.centerX()+net.pin(k).xOffset()))/r);
                    f_3 = f_3 + exp((module.centerY()+net.pin(k).yOffset())/r);
                    f_4 = f_4 + exp((-1*(module.centerY()+net.pin(k).yOffset()))/r);
                }    
                else{
                    f_1 = f_1 + exp((x[moduleID[k]]+net.pin(k).xOffset())/r);
                    f_2 = f_2 + exp((-1*(x[moduleID[k]]+net.pin(k).xOffset()))/r);
                    f_3 = f_3 + exp((x[moduleID[k]+num]+net.pin(k).yOffset())/r);
                    f_4 = f_4 + exp((-1*(x[moduleID[k]+num])+net.pin(k).xOffset())/r);
                }
            }
            f = f + log(f_1) + log(f_2) + log(f_3) + log(f_4) ;
        }
        f = f * r;

    }
}

unsigned ExampleFunction::dimension()
{
    return 2*_placement.numModules(); // num_blocks*2 
    // each two dimension represent the X and Y dimensions of each block
}

double ExampleFunction::abs(double a,bool &inv){
    if(a>0){inv = false;
        return a;}
    else{inv = true;
        return (-1)*a;}
}

void ExampleFunction::reset(){
    _last = 0;
    count = 0;
}
